name: Java CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        architecture: [x86, x64]
        exclude:
          - os: macos-latest
            architecture: x86
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 8
        architecture: ${{ matrix.architecture }}
    - name: print Java version
      run: java -version
    - if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.architecture, 'x86')
      name: Set up C/C++ compiler
      run: |
        sudo apt update
        sudo apt-get -y install g++-multilib
    - if: startsWith(matrix.os, 'windows-latest') && startsWith(matrix.architecture, 'x86')
      name: Set up C/C++ compiler
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: ${{ matrix.architecture }}
    - name: Compile, run tests, and build package with Maven
      run: mvn -B clean test package
    - if: github.event_name == 'push' && endsWith(github.event.head_commit.message, 'Update libraries')
      name: Push compiled library back to GitHub
      run: |
        git config user.name "${{ github.event.head_commit.committer.name }}"
        git config user.email "${{ github.event.head_commit.committer.email }}"
        git pull
        git add .
        git commit -am "Update native library: ${{ matrix.os }}-${{ matrix.architecture }}" --allow-empty
        git push
   
  release:
    needs: [build]
    name: Release if requested
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && endsWith(github.event.head_commit.message, 'Release new version')
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'zulu'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish to the Maven central repository
        run: |
          export GPG_TTY=$(tty)
          echo "${{ secrets.gpg_private_key }}" | gpg --batch --import
          git config user.name "toolfactory"
          git config user.email "tool.factory.heads@gmail.com"
          git pull
          mvn -B release:prepare release:perform -Dproject_jdk_version=8 -DskipTests=true \
             -Dgpg.passphrase="${{ secrets.gpg_passphrase }}" \
             -Dgpg.keyname=${{ secrets.gpg_key_id }} \
             -Drepository.url=https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git
        env:
          MAVEN_USERNAME: ${{ secrets.nexus_username }}
          MAVEN_PASSWORD: ${{ secrets.nexus_password }}
